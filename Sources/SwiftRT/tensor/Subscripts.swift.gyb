//******************************************************************************
// Copyright 2020 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//    https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
import Foundation

// gyb utility docs
// https://nshipster.com/swift-gyb/
%{
numShapes = 6
}%

//******************************************************************************
//
// DO NOT EDIT. THIS FILE IS GENERATED FROM swift.gyb file
//
//******************************************************************************

/// `Tensor Subscript Behavior`
/// A tensor subscripted with a range returns a sub view.
///
/// A tensor subscripted using `tensor.indices` or an Index formed
/// via the `ElementIndex` structure, will return an `Element`
///
/// A tensor subscripted with integers for each dimension is a convenience
/// function for wrapping the values in an `ElementIndex` structure, and
/// then returning the corresponding tensor `Element` value
///
/// Accessing a collection element value using an integer index calls
/// `read` or `readWrite` to synchronize with the calling thread

%for n in range(1, numShapes + 1):
//==============================================================================
// Rank${n}
public extension Tensor where Shape == Shape${n} {
    /// - Returns: the element
    @inlinable
    subscript(${', '.join(['d' + str(i) + ': Int' for i in range(n)])}) -> Element {
        get {
            read()
            return self[makeIndex(at: Shape${n}(${', '.join(['d' + str(i) for i in range(n)])}))]
        }
        set {
            readWrite()
            return self[makeIndex(at: Shape${n}(${', '.join(['d' + str(i) for i in range(n)])}))] = newValue
        }
    }

    /// - Returns: the sub view defined by the range
    @inlinable
    subscript<${', '.join(['R' + str(i) for i in range(n)])}>(${', '.join(['r' + str(i) + ': R' + str(i) for i in range(n)])}) -> Self where
% for i in range(n):
        R${i}: SignedRangeExpression${',' if i < (n - 1) else ''}
% end
    {
        get {
% for i in range(n):
            let d${i} = r${i}.relativeTo(0..<shape[${i}])
% end
            let lower = Shape${n}(${', '.join(['d' + str(i) + '.lowerBound' for i in range(n)])})
            let upper = Shape${n}(${', '.join(['d' + str(i) + '.upperBound' for i in range(n)])})
            return self[lower, upper]
        }
        
        set {
% for i in range(n):
            let d${i} = r${i}.relativeTo(0..<shape[${i}])
% end
            let lower = Shape${n}(${', '.join(['d' + str(i) + '.lowerBound' for i in range(n)])})
            let upper = Shape${n}(${', '.join(['d' + str(i) + '.upperBound' for i in range(n)])})
            self[lower, upper] = newValue
        }
    }
}

%end
