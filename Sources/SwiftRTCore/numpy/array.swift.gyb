//******************************************************************************
// Copyright 2020 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//    https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
import Foundation
import Numerics

// gyb utility docs
// https://nshipster.com/swift-gyb/
%{
numShapes = 6
}%

//******************************************************************************
//
// DO NOT EDIT. THIS FILE IS GENERATED FROM .swift.gyb file
//
//******************************************************************************

//==============================================================================
/// array
/// Creates a tensor of the given shape and type without initializing the
/// elements
///
/// - Parameters:
///  - elements: a collection of elements used to initialize storage
///  - shape: Int or tuple of Int describing the dimensions of the array
///  - type: data-type, optional
///    Desired output data-type for the array, e.g, Int8. Default is DType.
///  - order: { .C, .F }, optional, default .C
///    Whether to store multi-dimensional data in row-major (C-style)
///    or column-major (Fortran-style) order in memory.
///  - name: optional name
/// - Returns: Tensor of uninitialized (arbitrary) data of the given shape,
///   type, and order. Elements will not be initialized.

//******************************************************************************
// This section converts a flat Collection --> TensorR1
// where shape is implied by count
//******************************************************************************

//************************** Implicit typing

//---------------------------
// from Range
@inlinable public func array(
    _ range: Range<Int>,
    name: String = defaultTensorName
) -> Tensor<Shape1,DType> {
    Tensor<Shape1,DType>(range: range, Shape1(range.count), name: name)
}

//---------------------------
// linear space
@inlinable public func array<E>(
    from first: E,
    to last: E,
    count: Int,
    name: String = defaultTensorName
) -> Tensor<Shape1,E> where E == E.Value, E: AlgebraicField {
    Tensor<Shape1,E>(from: first, to: last, Shape1(count), name: name)
}

//---------------------------
// C.Element == Element.Stored
@inlinable public func array<C: Collection>(
    stored elements: C,
    name: String = defaultTensorName
) -> Tensor<Shape1,C.Element> where C.Element == C.Element.Stored {
    Tensor<Shape1,C.Element>(stored: elements, Shape1(elements.count), name: name)
}

//---------------------------
// C.Element == C.Element.Value
@inlinable public func array<C: Collection>(
    _ elements: C,
    name: String = defaultTensorName
) -> Tensor<Shape1,C.Element> where C.Element == C.Element.Value {
    Tensor<Shape1,C.Element>(elements, Shape1(elements.count), name: name)
}

//---------------------------
// C.Element == Int --> DType
@inlinable public func array<C: Collection>(
    _ elements: C,
    name: String = defaultTensorName
) -> Tensor<Shape1,DType> where C.Element == Int {
    Tensor<Shape1,DType>(elements, Shape1(elements.count), name: name)
}

//---------------------------
// C.Element == Double --> DType
@inlinable public func array<C: Collection>(
    _ elements: C,
    name: String = defaultTensorName
) -> Tensor<Shape1,DType> where C.Element == Double {
    Tensor<Shape1,DType>(elements, Shape1(elements.count), name: name)
}

//************************** Explicit typing

//---------------------------
// C.Element Bool --> numeric Element.Value
@inlinable public func array<C: Collection, Element: StorageElement>(
    _ elements: C,
    type: Element.Type,
    name: String = defaultTensorName
) -> Tensor<Shape1,Element> where C.Element == Bool, Element.Value: Numeric {
    Tensor<Shape1, Element>(elements, Shape1(elements.count), name: name)
}

//---------------------------
// C.Element numeric --> Bool
@inlinable public func array<C: Collection, Element: StorageElement>(
    _ elements: C,
    type: Element.Type,
    name: String = defaultTensorName
) -> Tensor<Shape1,Bool> where C.Element: Numeric, Element.Value == Bool {
    Tensor<Shape1,Bool>(elements, Shape1(elements.count), name: name)
}

//---------------------------
// C.Element Bool --> Bool1
@inlinable public func array<C: Collection, Element>(
    _ elements: C,
    type: Element.Type,
    name: String = defaultTensorName
) -> Tensor<Shape1,Element> where C.Element == Bool, Element.Value == Bool {
    Tensor<Shape1,Element>(elements, Shape1(elements.count), name: name)
}

//---------------------------
// C.Element integer --> numeric Element.Value
@inlinable public func array<C: Collection, Element: StorageElement>(
    _ elements: C,
    type: Element.Type,
    name: String = defaultTensorName
) -> Tensor<Shape1,Element>
    where C.Element: BinaryInteger, Element.Value: Numeric
{
    Tensor<Shape1, Element>(elements, Shape1(elements.count), name: name)
}

//---------------------------
// C.Element floating --> floating Element.Value
@inlinable public func array<C: Collection, Element: StorageElement>(
    _ elements: C,
    type: Element.Type,
    name: String = defaultTensorName
) -> Tensor<Shape1,Element>
    where C.Element: BinaryFloatingPoint, Element.Value: BinaryFloatingPoint
{
    Tensor<Shape1, Element>(elements, Shape1(elements.count), name: name)
}

//---------------------------
// C.Element floating --> integer Element.Value
@inlinable public func array<C: Collection, Element: StorageElement>(
    _ elements: C,
    type: Element.Type,
    name: String = defaultTensorName
) -> Tensor<Shape1,Element>
    where C.Element: BinaryFloatingPoint, Element.Value: BinaryInteger
{
    Tensor<Shape1,Element>(elements, Shape1(elements.count), name: name)
}

//******************************************************************************
// This section converts a flat Collection --> shaped Tensor
//******************************************************************************

%for n in range(2, numShapes + 1):
//------------------------------------------------------------------------------
// Rank${n}
//************************** Implicit typing

//---------------------------
// from Range
@inlinable public func array(
    _ range: Range<Int>,
    _ shape: Shape${n}.Tuple,
    order: Order = .defaultOrder,
    name: String = defaultTensorName
) -> Tensor<Shape${n},DType> {
    Tensor<Shape${n},DType>(range: range, Shape${n}(shape), order: order, name: name)
}

@inlinable public func array(
    _ range: Range<Int>,
    _ shape: Shape${n},
    order: Order = .defaultOrder,
    name: String = defaultTensorName
) -> Tensor<Shape${n},DType> {
    Tensor<Shape${n},DType>(range: range, shape, order: order, name: name)
}

//---------------------------
// linear space
@inlinable public func array<E>(
    from first: E,
    to last: E,
    _ shape: Shape${n}.Tuple,
    order: Order = .defaultOrder,
    name: String = defaultTensorName
) -> Tensor<Shape${n},E> where E == E.Value, E: AlgebraicField {
    Tensor<Shape${n},E>(from: first, to: last, Shape${n}(shape),
                        order: order, name: name)
}

@inlinable public func array<E>(
    from first: E,
    to last: E,
    _ shape: Shape${n},
    order: Order = .defaultOrder,
    name: String = defaultTensorName
) -> Tensor<Shape${n},E> where E == E.Value, E: AlgebraicField {
    Tensor<Shape${n},E>(from: first, to: last, shape, order: order, name: name)
}

//---------------------------
// C.Element == Element.Stored
@inlinable public func array<C: Collection>(
    stored elements: C,
    _ shape: Shape${n}.Tuple,
    order: Order = .defaultOrder,
    name: String = defaultTensorName
) -> Tensor<Shape${n},C.Element> where C.Element == C.Element.Stored {
    Tensor<Shape${n},C.Element>(stored: elements, Shape${n}(shape),
                                order: order, name: name)
}

@inlinable public func array<C: Collection>(
    stored elements: C,
    _ shape: Shape${n},
    order: Order = .defaultOrder,
    name: String = defaultTensorName
) -> Tensor<Shape${n},C.Element> where C.Element == C.Element.Stored {
    Tensor<Shape${n},C.Element>(stored: elements, shape, order: order, name: name)
}

//---------------------------
// C.Element == Element.Value
@inlinable public func array<C: Collection>(
    _ elements: C,
    _ shape: Shape${n}.Tuple,
    order: Order = .defaultOrder,
    name: String = defaultTensorName
) -> Tensor<Shape${n},C.Element> where C.Element == C.Element.Value {
    Tensor<Shape${n},C.Element>(elements, Shape${n}(shape), order: order, name: name)
}

@inlinable public func array<C: Collection>(
    _ elements: C,
    _ shape: Shape${n},
    order: Order = .defaultOrder,
    name: String = defaultTensorName
) -> Tensor<Shape${n},C.Element> where C.Element == C.Element.Value {
    Tensor<Shape${n},C.Element>(elements, shape, order: order, name: name)
}

//---------------------------
// C.Element == Element.Value
@inlinable public func array<C: Collection>(
    _ elements: C,
    _ shape: Shape${n}.Tuple,
    order: Order = .defaultOrder,
    name: String = defaultTensorName
) -> Tensor<Shape${n},DType> where C.Element == Int {
    Tensor<Shape${n},DType>(elements, Shape${n}(shape), order: order, name: name)
}

@inlinable public func array<C: Collection>(
    _ elements: C,
    _ shape: Shape${n},
    order: Order = .defaultOrder,
    name: String = defaultTensorName
) -> Tensor<Shape${n},DType> where C.Element == Int {
    Tensor<Shape${n},DType>(elements, shape, order: order, name: name)
}

//---------------------------
// C.Element == Element.Value
@inlinable public func array<C: Collection>(
    _ elements: C,
    _ shape: Shape${n}.Tuple,
    order: Order = .defaultOrder,
    name: String = defaultTensorName
) -> Tensor<Shape${n},DType> where C.Element == Double {
    Tensor<Shape${n},DType>(elements, Shape${n}(shape), order: order, name: name)
}

@inlinable public func array<C: Collection>(
    _ elements: C,
    _ shape: Shape${n},
    order: Order = .defaultOrder,
    name: String = defaultTensorName
) -> Tensor<Shape${n},DType> where C.Element == Double {
    Tensor<Shape${n},DType>(elements, shape, order: order, name: name)
}

//************************** Explicit typing

//---------------------------
// from Range
@inlinable public func array<Element>(
    _ range: Range<Int>,
    _ shape: Shape${n}.Tuple,
    type: Element.Type,
    order: Order = .defaultOrder,
    name: String = defaultTensorName
) -> Tensor<Shape${n},Element> where Element.Value: Numeric {
    Tensor<Shape${n},Element>(range: range, Shape${n}(shape),
                            order: order, name: name)
}

@inlinable public func array<Element>(
    _ range: Range<Int>,
    _ shape: Shape${n},
    type: Element.Type,
    order: Order = .defaultOrder,
    name: String = defaultTensorName
) -> Tensor<Shape${n},Element> where Element.Value: Numeric {
    Tensor<Shape${n},Element>(range: range, shape, order: order, name: name)
}

//---------------------------
// C.Element Bool --> Numeric Element.Value
@inlinable public func array<C: Collection, Element>(
    _ elements: C,
    _ shape: Shape${n}.Tuple,
    type: Element.Type,
    order: Order = .defaultOrder,
    name: String = defaultTensorName
) -> Tensor<Shape${n},Element> where C.Element == Bool, Element.Value: Numeric {
    Tensor<Shape${n},Element>(elements, Shape${n}(shape), order: order, name: name)
}

@inlinable public func array<C: Collection, Element>(
    _ elements: C,
    _ shape: Shape${n},
    type: Element.Type,
    order: Order = .defaultOrder,
    name: String = defaultTensorName
) -> Tensor<Shape${n},Element> where C.Element == Bool, Element.Value: Numeric {
    Tensor<Shape${n},Element>(elements, shape, order: order, name: name)
}

//---------------------------
// C.Element Numeric --> Bool Element.Value
@inlinable public func array<C: Collection, Element>(
    _ elements: C,
    _ shape: Shape${n}.Tuple,
    type: Element.Type,
    order: Order = .defaultOrder,
    name: String = defaultTensorName
) -> Tensor<Shape${n},Element> where C.Element: Numeric, Element.Value == Bool {
    Tensor<Shape${n},Element>(elements, Shape${n}(shape), order: order, name: name)
}

@inlinable public func array<C: Collection, Element>(
    _ elements: C,
    _ shape: Shape${n},
    type: Element.Type,
    order: Order = .defaultOrder,
    name: String = defaultTensorName
) -> Tensor<Shape${n},Element> where C.Element: Numeric, Element.Value == Bool {
    Tensor<Shape${n},Element>(elements, shape, order: order, name: name)
}

//---------------------------
// C.Element Bool --> Bool Element.Value
@inlinable public func array<C: Collection, Element>(
    _ elements: C,
    _ shape: Shape${n}.Tuple,
    type: Element.Type,
    order: Order = .defaultOrder,
    name: String = defaultTensorName
) -> Tensor<Shape${n},Element> where C.Element == Bool, Element.Value == Bool {
    Tensor<Shape${n},Element>(elements, Shape${n}(shape), order: order, name: name)
}

@inlinable public func array<C: Collection, Element>(
    _ elements: C,
    _ shape: Shape${n},
    type: Element.Type,
    order: Order = .defaultOrder,
    name: String = defaultTensorName
) -> Tensor<Shape${n},Element> where C.Element == Bool, Element.Value == Bool {
    Tensor<Shape${n},Element>(elements, shape, order: order, name: name)
}

//---------------------------
// C.Element integer --> numeric Element.Value
@inlinable public func array<C: Collection, Element>(
    _ elements: C,
    _ shape: Shape${n}.Tuple,
    type: Element.Type,
    order: Order = .defaultOrder,
    name: String = defaultTensorName
) -> Tensor<Shape${n},Element>
    where C.Element: BinaryInteger, Element.Value: Numeric {
    Tensor<Shape${n},Element>(elements, Shape${n}(shape), order: order, name: name)
}

@inlinable public func array<C: Collection, Element>(
    _ elements: C,
    _ shape: Shape${n},
    type: Element.Type,
    order: Order = .defaultOrder,
    name: String = defaultTensorName
) -> Tensor<Shape${n},Element>
    where C.Element: BinaryInteger, Element.Value: Numeric {
    Tensor<Shape${n},Element>(elements, shape, order: order, name: name)
}

//---------------------------
// C.Element floating --> floating Element.Value
@inlinable public func array<C: Collection, Element>(
    _ elements: C,
    _ shape: Shape${n}.Tuple,
    type: Element.Type,
    order: Order = .defaultOrder,
    name: String = defaultTensorName
) -> Tensor<Shape${n},Element>
    where C.Element: BinaryFloatingPoint, Element.Value: BinaryFloatingPoint {
    Tensor<Shape${n},Element>(elements, Shape${n}(shape), order: order, name: name)
}

@inlinable public func array<C: Collection, Element>(
    _ elements: C,
    _ shape: Shape${n},
    type: Element.Type,
    order: Order = .defaultOrder,
    name: String = defaultTensorName
) -> Tensor<Shape${n},Element>
    where C.Element: BinaryFloatingPoint, Element.Value: BinaryFloatingPoint {
    Tensor<Shape${n},Element>(elements, shape, order: order, name: name)
}

//---------------------------
// C.Element floating --> integer Element.Value
@inlinable public func array<C: Collection, Element>(
    _ elements: C,
    _ shape: Shape${n}.Tuple,
    type: Element.Type,
    order: Order = .defaultOrder,
    name: String = defaultTensorName
) -> Tensor<Shape${n},Element>
    where C.Element: BinaryFloatingPoint, Element.Value: BinaryInteger {
    Tensor<Shape${n},Element>(elements, Shape${n}(shape), order: order, name: name)
}

@inlinable public func array<C: Collection, Element>(
    _ elements: C,
    _ shape: Shape${n},
    type: Element.Type,
    order: Order = .defaultOrder,
    name: String = defaultTensorName
) -> Tensor<Shape${n},Element>
    where C.Element: BinaryFloatingPoint, Element.Value: BinaryInteger {
    Tensor<Shape${n},Element>(elements, shape, order: order, name: name)
}

%end

//******************************************************************************
// This section converts a Collection of collections --> shaped Tensor
// Swift Arrays are converted using this section
//******************************************************************************

%for n in range(2, numShapes + 1):
//------------------------------------------------------------------------------
// Rank${n}
//************************** Implicit typing

//---------------------------
// C.Element == Element.Stored
@inlinable public func array<C>(
    stored elements: C,
    order: Order = .defaultOrder,
    name: String = defaultTensorName
) -> Tensor<Shape${n},C${'.Element' * n}>
    where
% for i in range(n):
    C${'.Element' * i}: Collection,
% end
    C${'.Element' * n} == C${'.Element' * n}.Stored
{
    let shape = Shape${n}(
% for i in range(n):
        elements${'.first!' * i}.count${')' if i == n - 1 else ','}
% end

    let flatElements = elements${'.joined()' * (n - 1)}
    return Tensor<Shape${n},C${'.Element' * n}>(
        stored: flatElements, shape, order: order, name: name)
}

//---------------------------
// C.Element == Element.Value
@inlinable public func array<C>(
    _ elements: C,
    order: Order = .defaultOrder,
    name: String = defaultTensorName
) -> Tensor<Shape${n},C${'.Element' * n}>
    where
% for i in range(n):
    C${'.Element' * i}: Collection,
% end
    C${'.Element' * n} == C${'.Element' * n}.Value
{
    let shape = Shape${n}(
% for i in range(n):
        elements${'.first!' * i}.count${')' if i == n - 1 else ','}
% end

    let flatElements = elements${'.joined()' * (n - 1)}
    return Tensor<Shape${n},C${'.Element' * n}>(
        flatElements, shape, order: order, name: name)
}

//---------------------------
// C.Element == Int --> DType
@inlinable public func array<C>(
    _ elements: C,
    order: Order = .defaultOrder,
    name: String = defaultTensorName
) -> Tensor<Shape${n},DType>
    where
% for i in range(n):
    C${'.Element' * i}: Collection,
% end
    C${'.Element' * n} == Int
{
    let shape = Shape${n}(
% for i in range(n):
        elements${'.first!' * i}.count${')' if i == n - 1 else ','}
% end

    let flatElements = elements${'.joined()' * (n - 1)}
    return Tensor<Shape${n},DType>(
        flatElements, shape, order: order, name: name)
}

//---------------------------
// C.Element == Double --> DType
@inlinable public func array<C>(
    _ elements: C,
    order: Order = .defaultOrder,
    name: String = defaultTensorName
) -> Tensor<Shape${n},DType>
    where
% for i in range(n):
    C${'.Element' * i}: Collection,
% end
    C${'.Element' * n} == Double
{
    let shape = Shape${n}(
% for i in range(n):
        elements${'.first!' * i}.count${')' if i == n - 1 else ','}
% end

    let flatElements = elements${'.joined()' * (n - 1)}
    return Tensor<Shape${n},DType>(
        flatElements, shape, order: order, name: name)
}

//************************** Explicit typing

//---------------------------
// C.Element Bool --> numeric Element.Value
@inlinable public func array<C,Element>(
    _ elements: C,
    type: Element.Type,
    order: Order = .defaultOrder,
    name: String = defaultTensorName
) -> Tensor<Shape${n},Element>
    where
% for i in range(n):
    C${'.Element' * i}: Collection,
% end
    C${'.Element' * n} == Bool, Element.Value: Numeric
{
    let shape = Shape${n}(
% for i in range(n):
        elements${'.first!' * i}.count${')' if i == n - 1 else ','}
% end

    let flatElements = elements${'.joined()' * (n - 1)}
    return Tensor<Shape${n},Element>(
        flatElements, shape, order: order, name: name)
}

//---------------------------
// C.Element Bool --> Bool
@inlinable public func array<C, Element>(
    _ elements: C,
    type: Element.Type,
    order: Order = .defaultOrder,
    name: String = defaultTensorName
) -> Tensor<Shape${n},Element>
    where
% for i in range(n):
    C${'.Element' * i}: Collection,
% end
    C${'.Element' * n} == Bool, Element.Value == Bool
{
    let shape = Shape${n}(
% for i in range(n):
        elements${'.first!' * i}.count${")" if i == n - 1 else ","}
% end

    let flatElements = elements${'.joined()' * (n - 1)}
    return Tensor<Shape${n},Element>(flatElements, shape, order: order, name: name)
}

//---------------------------
// C.Element integer --> numeric Element.Value
@inlinable public func array<C, Element>(
    _ elements: C,
    type: Element.Type,
    order: Order = .defaultOrder,
    name: String = defaultTensorName
) -> Tensor<Shape${n},Element>
    where
% for i in range(n):
    C${'.Element' * i}: Collection,
% end
    C${'.Element' * n}: BinaryInteger, Element.Value: Numeric
{
    let shape = Shape${n}(
% for i in range(n):
        elements${'.first!' * i}.count${")" if i == n - 1 else ","}
% end

    let flatElements = elements${'.joined()' * (n - 1)}
    return Tensor<Shape${n},Element>(flatElements, shape, order: order, name: name)
}

//---------------------------
// C.Element floating --> floating Element.Value
@inlinable public func array<C, Element>(
    _ elements: C,
    type: Element.Type,
    order: Order = .defaultOrder,
    name: String = defaultTensorName
) -> Tensor<Shape${n},Element>
    where
% for i in range(n):
    C${'.Element' * i}: Collection,
% end
    C${'.Element' * n}: BinaryFloatingPoint,
    Element.Value: BinaryFloatingPoint
{
    let shape = Shape${n}(
% for i in range(n):
        elements${'.first!' * i}.count${")" if i == n - 1 else ","}
% end

    let flatElements = elements${'.joined()' * (n - 1)}
    return Tensor<Shape${n},Element>(flatElements, shape, order: order, name: name)
}

//---------------------------
// C.Element floating --> floating Element.Value
@inlinable public func array<C, Element>(
    _ elements: C,
    type: Element.Type,
    order: Order = .defaultOrder,
    name: String = defaultTensorName
) -> Tensor<Shape${n},Element>
    where
% for i in range(n):
    C${'.Element' * i}: Collection,
% end
    C${'.Element' * n}: BinaryFloatingPoint,
    Element.Value: BinaryInteger
{
    let shape = Shape${n}(
% for i in range(n):
        elements${'.first!' * i}.count${")" if i == n - 1 else ","}
% end

    let flatElements = elements${'.joined()' * (n - 1)}
    return Tensor<Shape${n},Element>(flatElements, shape, order: order, name: name)
}

%end

//******************************************************************************
// This section converts Tensor --> Swift Array
//******************************************************************************

//------------------------------------------------------------------------------
// Rank1 to Swift Array
public extension Tensor where Shape == Shape1 {
    @inlinable var array: [Element] {
        usingAppThreadQueue {
            isContiguous ? [Element](buffer) : [Element](elements)
        }
    }
}

%for n in range(2, numShapes + 1):
//------------------------------------------------------------------------------
// Rank${n} to Swift Array
public extension Tensor where Shape == Shape${n} {
    @inlinable var array: ${'[' * n}Element${']' * n} {
        usingAppThreadQueue {
% for i in range(n - 1):
%  indent = '    ' * (i + 1)
        ${indent}var array${n - i} = ${'[' * (n - i)}Element${']' * (n - i)}()
        ${indent}for d${i} in 0..<shape[${i}] {
% end
        ${'    ' * (i + 2)}let row = self[${', '.join(['d' + str(j) for j in range(n - 1)])}, 0...]
        ${'    ' * (i + 2)}let elements = row.isContiguous && row.order == .row ?
        ${'    ' * (i + 3)}[Element](row.buffer) : [Element](row.elements)
        ${'    ' * (i + 2)}array${n - i}.append(elements)
% for i in reversed(range(n - 1)):
%  indent = '    ' * (i + 1)
        ${indent}}
        ${indent}${'array' + str(n - i + 1) + '.append(array' + str(n - i) + ')' if i > 0 else 'return array' + str(n - i)}
% end
        }
    }
}

%end

//==============================================================================
/// Equatable
%for n in range(1, numShapes + 1):
public extension Tensor where Shape == Shape${n}, Element: Equatable {
    @inlinable static func == (lhs: Self, rhs: ${'[' * n}Element${']' * n}) -> Bool {
        lhs.array == rhs
    }
}

%end

